{
    "collab_server" : "",
    "contents" : "# Walter Reilly\n# sms2 analysis script\n# started 8.8.17\n# copied from sms 2 retrieval script\n\nlibrary(tidyverse)\n\nd = read.csv(\"~/drive/grad_school/DML_WBR/Sequences_Exp3/sms_scan_drive/sms_scan_fmri_copy/all_sms_scan_retreival_dat/all_sms_scan_retrieval_8_8_17.csv\", \n             na.strings=\"NaN\", stringsAsFactors=FALSE)\n\nd$rt = as.numeric(d$rt)\nd$sub = as.numeric(d$sub)\n\n#get rid of column info for each block\nd = d[!(d$block == \"\" | d$block == \"block\"), ]\n\n#subs to throw out \n# none so far\n\n# add position info\nd = mutate(d, position = rep(c(1:5),times = dim(d)[1]/5))\n\n# exclude for same consecutive responses (3sds) or too many \"no_resp\"\n\n# crunch the no_resp's\nresponse.counts = count(group_by(d,sub,response))\nnoresp.exclude = response.counts %>% filter(response == \"no_resp\") \nx = mean(noresp.exclude$n)\ny = sd(noresp.exclude$n)\nnoresp.exclude = noresp.exclude %>% mutate(zresp = (n - x)/y)\n# looks like it isn't an issue so far. only 10 total from 4 subjects. \n# Might want to look at proportion of yes/no at some point\n\n\n# the hard way to assign position labels\n# d$position = NA\n# x = 2\n# for (i in 2:dim(d)[1]){\n#   while(x < 6){\n#     if (x == 1) {d[i,13] = x; x = x+1;break;}\n#     else if (x > 1 & x < 5 & d[i,5] == d[i-1,5]) {d[i,13] = x; x = x+1;break;}\n#     else if (x == 5) {d[i,13] = x; x = 1;break;}\n# }}\n# check that they are the same\n# d = d %>% mutate(poscheck = position == pos)\n# sum(d$poscheck, na.rm = TRUE)\n\n\n\n# add observation column to df\nd = mutate(d, obs = 1:dim(d)[1])\n\n# this didn't work for sms2 retr dat. NaN instead of NA?\nexrows = d[!complete.cases(d$rt),14]\ndsansnas = d[-c(exrows),]\n\n\n# randoms need unified condition label\n# create new column with numeric condition labels\n# intact = 1, scrambled = 2, random = 3\ndsansnas = dsansnas %>% mutate(con.num = condition)\ndsansnas[,15] = ifelse(dsansnas[,15] == \"intact\", 1, ifelse(dsansnas[,15] == \"scrambled\", 2, 3))\n\n# trim rts\nsub.con.mean.rt = dsansnas %>%  group_by(sub,con.num) %>% \n  summarise(mean = mean(rt, na.rm = TRUE), SD = sd(rt, na.rm = TRUE))\n\ndsansnas = dsansnas %>%  group_by(sub,con.num) %>% \n  mutate(mean.sub.con = mean(rt, na.rm = TRUE), SD.sub.con = sd(rt, na.rm = TRUE))\n\ndsansnas = dsansnas %>% mutate(sd3 = 3 * SD.sub.con) \n\n\n# exlude too long\n# 32 for the first 4 subjects. Not too bad\ndsansnas = dsansnas %>% mutate(exclude.high = rt > mean.sub.con + sd3)\n# exclude too short\n# Zero, per usual\ndsansnas = dsansnas %>% mutate(exclude.low = rt < mean.sub.con - sd3)\n# exlude hella fast <  100ms\n# only 3. Nice!\ndsansnas = dsansnas %>% mutate(exclude.hellafast = rt < 100)\n\n####put in new df\ndclean = dsansnas %>% filter(exclude.low == FALSE, exclude.high == FALSE, exclude.hellafast == FALSE)\n\n# sum stats\nsumstats = dclean %>% group_by(con.num) %>% summarise(mean = mean(rt, na.rm = TRUE), SD = sd(rt, na.rm = TRUE))\nsumstats.rep = dclean %>% group_by(repetition) %>% summarise(mean = mean(rt, na.rm = TRUE), SD = sd(rt, na.rm = TRUE))\nsumstats.rep.con = dclean %>% group_by(repetition,con.num) %>% summarise(mean = mean(rt, na.rm = TRUE), SD = sd(rt, na.rm = TRUE))\n\n\n\n# look at rt by position\n#####################################################################################\nsumstats.pos = dclean %>% group_by(con.num, position) %>% summarise(mean = mean(rt), SD = sd(rt))\n\np.pos =  ggplot(data=sumstats.pos, aes(x=position, y=mean, group=con.num, colour = con.num)) +\n  geom_line(stat = \"identity\") + \n  ggtitle(\"SMS2: Condition * Position \")\np.pos\n\n#############################################\n# mean pos 4-5 by condition\n#exclude all 1 positions\n\nd25 = dclean %>% filter(!position == 1)\n\n################################\n# make plot of mean differences\nd25sumstats.con = d25 %>% group_by(con.num) %>% summarise(mean = mean(rt), SD = sd(rt))\n\n# trial counts\nd25.counts = count(group_by(d25,con.num))\n\n# add n to sumstats\nd25sumstats.con[,4] = d25.counts[,2]\n\n# add SE\nd25sumstats.con = mutate(d25sumstats.con, SE = SD/sqrt(n))\n\n# create a bar graph\nlimits <- aes(ymax = d25sumstats.con$mean + d25sumstats.con$SE,\n              ymin = d25sumstats.con$mean - d25sumstats.con$SE)\n\np.con <- ggplot(data = d25sumstats.con, aes(x = factor(con.num), y = mean))\np.con = p.con + geom_bar(stat = \"identity\",position = position_dodge(0.9)) +\n  geom_errorbar(limits, position = position_dodge(0.9),\n                width = 0.15) + \n  labs(x = \"Conditions\", y = \"Pos 2-5 Mean RT\") +\n  ggtitle(\"Mean RT of Positions 2-5\") +\n  scale_x_discrete(\"Conditions\", labels = \n                     c(\"1\" = \"Intact\", \"2\" = \"Scrambled-Fixed\", \n                       \"3\" = \"Scrambled-Random\"))\np.con = p.con + coord_cartesian(ylim=c(500,1000))\np.con\n\n\n\n\n# here it goes\n# get some summary statistics\nd25sumstats = d25 %>% group_by(con.num) %>% summarise(mean = mean(rt), SD = sd(rt))\nd25sumstats.rep = d25 %>% group_by(repetition) %>% summarise(mean = mean(rt), SD = sd(rt))\nd25sumstats.rep.con = d25 %>% group_by(repetition,con.num) %>% summarise(mean = mean(rt), SD = sd(rt))\n\n# trial counts\nd25.counts = count(d25, con.num)\n\n\n# repetition by condition and only pos's 2-5\n# get n\ncounts2 = count(group_by(d25,con.num, repetition))\n\n# add n to sumstats\nd25sumstats.rep.con[,5] = counts2[,3]\n\n# add SE\nd25sumstats.rep.con = mutate(d25sumstats.rep.con, SE = SD/sqrt(n))\n\n# create a bar graph\nlimits <- aes(ymax = d25sumstats.rep.con$mean + d25sumstats.rep.con$SE,\n              ymin = d25sumstats.rep.con$mean - d25sumstats.rep.con$SE)\n\np.rep.con <- ggplot(data = d25sumstats.rep.con, aes(x = factor(con.num), y = mean,\n                                                    fill = factor(repetition)))\np.rep.con = p.rep.con + geom_bar(stat = \"identity\",position = position_dodge(0.9)) +\n  geom_errorbar(limits, position = position_dodge(0.9),\n                width = 0.15) + \n  labs(x = \"Conditions\", y = \"Pos 2-5 Mean RT\") +\n  ggtitle(\"Mean RT by Condition and Repetition\") +\n  scale_x_discrete(\"Conditions\", labels = \n                     c(\"1\" = \"Intact\", \"2\" = \"Scrambled-Fixed\", \n                       \"3\" = \"Scrambled-Random\"))\np.rep.con = p.rep.con + coord_cartesian(ylim=c(500,1200))\np.rep.con\n\n############################\n# condition and rrb\nd25sumstats.rrb.con = d25 %>% group_by(rrb,con.num) %>% summarise(mean = mean(rt), SD = sd(rt))\n\n# trial counts\nd25.counts = count(d25, con.num)\n# repetition by condition and only pos's 2-5\n# get n\nd25$rrb = as.factor(d25$rrb)\ncounts2 = count(group_by(d25,con.num, rrb))\n\n# add n to sumstats\nd25sumstats.rrb.con[,5] = counts2[,3]\n\n# add SE\nd25sumstats.rrb.con = mutate(d25sumstats.rrb.con, SE = SD/sqrt(n))\n\n# create a bar graph\nlimits <- aes(ymax = d25sumstats.rrb.con$mean + d25sumstats.rrb.con$SE,\n              ymin = d25sumstats.rrb.con$mean - d25sumstats.rrb.con$SE)\n\np.rrb.con <- ggplot(data = d25sumstats.rrb.con, aes(x = factor(con.num), y = mean,\n                                                    fill = factor(rrb)))\np.rrb.con = p.rrb.con + geom_bar(stat = \"identity\",position = position_dodge(0.9)) +\n  geom_errorbar(limits, position = position_dodge(0.9),\n                width = 0.15) + \n  labs(x = \"Conditions\", y = \"Pos 2-5 Mean RT\") +\n  ggtitle(\"Mean RT by Condition and RRB\") +\n  scale_x_discrete(\"Conditions\", labels = \n                     c(\"1\" = \"Intact\", \"2\" = \"Scrambled-Fixed\", \n                       \"3\" = \"Scrambled-Random\"))\np.rrb.con = p.rrb.con + coord_cartesian(ylim=c(500,1100))\np.rrb.con\n\n# # # # # # # # # # # # # # #\n# make a bar graph of position by conditiong with SE\n# get n\ncounts = count(group_by(dclean,con.num, position))\n\n# add n to sumstats\nsumstats.pos[,5] = counts[,3]\n\n# add SE\nsumstats.pos = mutate(sumstats.pos, SE = SD/sqrt(n))\n\n# create a bar graph\nlimits <- aes(ymax = sumstats.pos$mean + sumstats.pos$SE,\n              ymin = sumstats.pos$mean - sumstats.pos$SE)\n\np.pos.con <- ggplot(data = sumstats.pos, aes(x = factor(con.num), y = mean,\n                                             fill = factor(position)))\np.pos.con = p.pos.con + geom_bar(stat = \"identity\",\n                                 position = position_dodge(0.9)) +\n  geom_errorbar(limits, position = position_dodge(0.9),\n                width = 0.15) + \n  labs(x = \"Condition\", y = \"RT\") +\n  ggtitle(\"RT by Position and Condition\") +\n  scale_fill_discrete(name = \"Position\")  +\n  scale_x_discrete(\"Conditions\", labels = \n                     c(\"1\" = \"Intact\", \"2\" = \"Scrambled-Fixed\", \n                       \"3\" = \"Scrambled-Random\"))\np.pos.con = p.pos.con + coord_cartesian(ylim=c(500,1100))\np.pos.con\n\n######################################l\n# ANOVA\n# type 3 SS w/in subs ANOVA\nlibrary(afex)\na1 = aov_ez(\"sub\", \"rt\", d25, within = c(\"con.num\",\"repetition\", \"rrb\"))\na1\nlsmeans(a1,\"con.num\",contr = \"pairwise\", adjust = \"holm\")\n\nd25.con1and2 = d25 %>%  filter(con.num != 3)\n\n\n# how about just intact and scrmabled\na2 = aov_ez(\"sub\", \"rt\", d25.con1and2 , within = c(\"con.num\",\"repetition\", \"rrb\"))\na2\nlsmeans(a2,\"con.num\",contr = \"pairwise\")\n\n\n#####################\n# look at diffs\n#####################\n\nd.diff = d \n\nd.diff = d.diff %>% mutate(con.num = condition)\nd.diff[,15] = ifelse(d.diff[,15] == \"intact\", 1, ifelse(d.diff[,15] == \"scrambled\", 2, 3))\n\nd.diff$seq = rep(1:3205, each = 5)\n\n# mean and sd for ID'ing outliers \nd.diff = d.diff %>%  group_by(sub,condition) %>% \n  mutate(mean.sub.con = mean(rt, na.rm = TRUE), SD.sub.con = sd(rt, na.rm = TRUE))\n\nd.diff = d.diff %>% mutate(sd3 = 3 * SD.sub.con) \n\n# exlude too long\nd.diff = d.diff %>% mutate(exclude.high = rt > mean.sub.con + sd3)\n# exclude too short\nd.diff = d.diff %>% mutate(exclude.low = rt < mean.sub.con - sd3)\n\n\n# identify too long position 1 RT and NA\ntest2 = d.diff %>% filter(exclude.high == TRUE | is.na(exclude.high)) %>% filter(position == 1)\n# so ~125 position 1s that need to be exluded along with the other 4 positions in the sequence \nexrows.diff = which(d.diff$seq %in% c(test2$seq))\nd.diff.clean = d.diff[-c(exrows.diff),]\n# check that those sequences are gone\ntest3 = d.diff.clean %>% filter(exclude.high == TRUE | is.na(exclude.high)) %>% filter(position == 1)\n# test 3 is empty so this was successful. \n\n# now remove the rest of long RTs\n# only want complete sequences for this analysis \n# identify too long RT and NA\ntest4 = d.diff.clean %>% filter(exclude.high == TRUE | is.na(exclude.high))\n# 140 trials that will be excluded along with their whole sequence actually makes 700 trials excluded... probably makes this not worthwhile\nexrows.diff.2 = which(d.diff.clean$seq %in% c(test4$seq))\nd.diff.clean = d.diff.clean[-c(exrows.diff.2),]\n# check that those sequences are gone\ntest4 = d.diff.clean %>% filter(exclude.high == TRUE | is.na(exclude.high)) \n\n\n\n##### only remaining problem would be if there exists a pos 1 valid RT but not valid 2-5 RTs for a given sequence \n\n\n\n# now ready to look at sequence diffs without having mismatch of rows\nd.diff.pos1 = d.diff.clean %>% filter(position == 1)\nd.diff.25 = d.diff.clean %>% filter(!position == 1)\n# for pos 2-5 remove NAs when calculating mean\nmean25 = d.diff.25 %>% group_by(sub,block,repetition,condition,seq) %>%  summarise(mean25 = mean(rt)) \npos1 = d.diff.pos1 %>% group_by(sub,block,repetition,condition,seq) %>% summarise(pos1 = mean(rt))\n# these don't have equal numebrs of rows, find the discrepancy\nmismatch = mean25[,\"seq\"] == pos1[,\"seq\"]\n######### mismatch only consists of TRUE, indicating that the seq label for pos 1 matches for all pos 2-5 means\n\n\ndiffmeans = mean25\ndiffmeans[,7] = pos1[,6]\ndiffmeans = diffmeans %>% mutate(diffs = pos1 - mean25)\ndiffmeans = diffmeans %>% mutate(sancheck = diffs < 0)\nsum(diffmeans$sancheck, na.rm =TRUE)\n####  1936 sequences with faster 2-5 than pos 1 (positive diff), and 950 with the opposite \n# most of those should be from scrambled-random\n\n\n#also make repetition a factor\ndiffmeans$repetition = as.factor(diffmeans$repetition)\ndiffmeans = diffmeans %>% mutate(con.num = condition)\ndiffmeans[,10] = ifelse(diffmeans[,10] == \"intact\", 1, ifelse(diffmeans[,10] == \"scrambled\", 2, 3))\n\n\n################################## now for the businesss\nlibrary(afex)\ndiffmeans$con.num = as.factor(diffmeans$con.num)\ndm1 = aov_ez(\"sub\", \"diffs\", diffmeans, within = c(\"con.num\",\"repetition\"))\ndm1\nlsmeans(dm1,\"con.num\",contr = \"pairwise\", adjust = \"holm\")  \n\n\n# t test between conditions\npairwise.t.test(diffmeans$diffs, diffmeans$con.num, p.adjust=\"holm\", pool.sd = T)\n\n\n# # # # # # # # # # # # # # graph it # # # # # #\ndiffmeans.sumstats.rep.con = diffmeans %>% group_by(repetition,con.num) %>% summarise(mean = mean(diffs), SD = sd(diffs))\n\n# trial counts\ndiffmeans.counts = count(diffmeans, con.num)\n\n\n# repetition by condition and only pos's 2-5\n# get n\ncounts2 = count(group_by(diffmeans,con.num, repetition))\n\n# add n to sumstats\ndiffmeans.sumstats.rep.con[,5] = counts2[,3]\n\n# add SE\ndiffmeans.sumstats.rep.con = mutate(diffmeans.sumstats.rep.con, SE = SD/sqrt(n))\n\n# create a bar graph\nlimits <- aes(ymax = diffmeans.sumstats.rep.con$mean + diffmeans.sumstats.rep.con$SE,\n              ymin = diffmeans.sumstats.rep.con$mean - diffmeans.sumstats.rep.con$SE)\n\ndiffsp.rep.con <- ggplot(data = diffmeans.sumstats.rep.con, aes(x = factor(con.num), y = mean,\n                                                                fill = factor(repetition)))\ndiffsp.rep.con = diffsp.rep.con + geom_bar(stat = \"identity\",position = position_dodge(0.9)) +\n  geom_errorbar(limits, position = position_dodge(0.9),\n                width = 0.15) + \n  labs(x = \"Conditions\", y = \"RT facilitation\") +\n  ggtitle(\"RT Facilitation by Condition and Repetition\") +\n  scale_x_discrete(\"Conditions\", labels = \n                     c(\"1\" = \"Intact\", \"2\" = \"Scrambled-Fixed\", \n                       \"3\" = \"Scrambled-Random\"))\ndiffsp.rep.con = diffsp.rep.con + coord_cartesian(ylim=c(0,350))\ndiffsp.rep.con\n\n# too noisy to look at between repetition effects \ndiffmeans.sumstats.con = diffmeans %>% group_by(con.num) %>% summarise(mean = mean(diffs), SD = sd(diffs))\n\n# repetition by condition and only pos's 2-5\n# get n\ndiff.con.counts = count(group_by(diffmeans,con.num))\n\n# add n to sumstats\ndiffmeans.sumstats.con[,4] = diff.con.counts[,2]\n\n# add SE\ndiffmeans.sumstats.con = mutate(diffmeans.sumstats.con, SE = SD/sqrt(n))\n\n# create a bar graph\nlimits <- aes(ymax = diffmeans.sumstats.con$mean + diffmeans.sumstats.con$SE,\n              ymin = diffmeans.sumstats.con$mean - diffmeans.sumstats.con$SE)\n\ndiffsp.con <- ggplot(data = diffmeans.sumstats.con, aes(x = factor(con.num), y = mean))\ndiffsp.con = diffsp.con + geom_bar(stat = \"identity\",position = position_dodge(0.9)) +\n  geom_errorbar(limits, position = position_dodge(0.9),\n                width = 0.15) + \n  labs(x = \"Conditions\", y = \"RT facilitation\") +\n  ggtitle(\"RT Facilitation by Condition\") +\n  scale_x_discrete(\"Conditions\", labels = \n                     c(\"1\" = \"Intact\", \"2\" = \"Scrambled-Fixed\", \n                       \"3\" = \"Scrambled-Random\"))\ndiffsp.con = diffsp.con + coord_cartesian(ylim=c(0,350))\ndiffsp.con\n\n\n##########################################\n# random stuff from looking back through data after initial analyses\n\n# why are rrb3 rts so much faster? \n\n# paired t test for difference between intact and scrambled in one rrb\nd25.con1and2.rrb1 = d25.con1and2[which(d25.con1and2$rrb == \"rrb1\"),]\nd25.con1and2.rrb2 = d25.con1and2[which(d25.con1and2$rrb == \"rrb2\"),]\nd25.con1and2.rrb3 = d25.con1and2[which(d25.con1and2$rrb == \"rrb3\"),]\nmean.stats = d25.con1and2.rrb1 %>% group_by(sub, con.num) %>%  summarise(mean = mean(rt), SD = sd(rt))\nintact.sub.mean = mean.stats[which(mean.stats$con.num == \"1\"),3]\nscrambled.sub.mean = mean.stats[which(mean.stats$con.num == \"2\"),3]\n\nt.test(as.matrix(intact.sub.mean), as.matrix(scrambled.sub.mean), paired = T )\n\nmaineffect =  as.matrix(scrambled.sub.mean) - as.matrix(intact.sub.mean)\n\n\n#######\nlsmip(a1, con.num ~ repetition)\n\na6 = aov_ez(\"sub\", \"rt\", d25.con1and2, within = c(\"con.num\",\"repetition\", \"rrb\"))\na6\nlsmeans(a6,\"con.num\",contr = \"pairwise\")\nlsmip(a6, con.num ~ rrb)\n\na3 = aov_ez(\"sub\", \"rt\", d25.con1and2.rrb1, within = c(\"con.num\",\"repetition\"))\na3\nlsmeans(a3,\"con.num\",contr = \"pairwise\")\nlsmip(a3, con.num ~ rrb)\n\na4 = aov_ez(\"sub\", \"rt\", d25.con1and2.rrb2, within = c(\"con.num\",\"repetition\"))\na4\nlsmeans(a4,\"con.num\",contr = \"pairwise\")\nlsmip(a4, con.num ~ rrb)\n\na5 = aov_ez(\"sub\", \"rt\", d25.con1and2.rrb3, within = c(\"con.num\",\"repetition\"))\na5\nlsmeans(a5,\"con.num\",contr = \"pairwise\")\nlsmip(a5, con.num ~ rrb)\n\n# 16.71 * 5\n# 48.84/83.55\n# from a5 pairwise contrast mean difference and SE gives effect size of .58\n# why is this so different from ges? \n\nr1 <- lsmeans(a3, ~con.num )\nr1\n\n# compute cohen's d using halle's function\n# get summary stats for conditions and subjects \nlibrary(halle)\nd.stats = d25.con1and2 %>% group_by(sub,con.num) %>%  summarize(mean = mean(rt))\nintact.sub.mean = d.stats[which(d.stats$con.num == \"1\"),3]\nscrambled.sub.mean = d.stats[which(d.stats$con.num == \"2\"),3]\ncohensd.frame = as.data.frame(c(intact.sub.mean, scrambled.sub.mean)) \ncolnames(cohensd.frame) =  c(\"var1\",\"var2\")\ncompute_cohens_d(cohensd.frame)\n\n# what about effect size calculated for each rrb\n# get summary stats for conditions and subjects \nd.stats = d25.con1and2.rrb2 %>% group_by(sub,con.num) %>%  summarize(mean = mean(rt))\nintact.sub.mean = d.stats[which(d.stats$con.num == \"1\"),3]\nscrambled.sub.mean = d.stats[which(d.stats$con.num == \"2\"),3]\ncohensd.frame = as.data.frame(c(intact.sub.mean, scrambled.sub.mean)) \ncolnames(cohensd.frame) =  c(\"var1\",\"var2\")\ncompute_cohens_d(cohensd.frame)\n\n#same for diffs\ndiffmeans.con1and2 =  diffmeans %>%  filter(con.num != 3)\nd.stats = diffmeans.con1and2 %>% group_by(sub,con.num) %>%  summarize(mean = mean(diffs))\nintact.sub.mean = d.stats[which(d.stats$con.num == \"1\"),3]\nscrambled.sub.mean = d.stats[which(d.stats$con.num == \"2\"),3]\ncohensd.frame = as.data.frame(c(intact.sub.mean, scrambled.sub.mean)) \ncolnames(cohensd.frame) =  c(\"var1\",\"var2\")\ncompute_cohens_d(cohensd.frame)\n\n#####\n# how about effect size for conditions 1 and 3\nd25.con1and3 = d25 %>% filter(con.num != 2)\nd.stats = d25.con1and3 %>% group_by(sub,con.num) %>%  summarize(mean = mean(rt))\nintact.sub.mean = d.stats[which(d.stats$con.num == \"1\"),3]\nscrambled.sub.mean = d.stats[which(d.stats$con.num == \"3\"),3]\ncohensd.frame = as.data.frame(c(intact.sub.mean, scrambled.sub.mean)) \ncolnames(cohensd.frame) =  c(\"var1\",\"var2\")\ncompute_cohens_d(cohensd.frame)\n\n################################################\n# look at test data \nsms2_test_acc <- read_csv(\"~/walter/dml/sms2/sms2_test_acc\",col_names = FALSE)\nsms2_test_acc = sms2_test_acc %>% mutate(z.test2 = scale(X2))\nsms2_test_acc[,4] = x\nsms2_test_acc = sms2_test_acc %>% mutate(sub = 8:33)\ncor.test(sms2_test_acc$z.test2,sms2_test_acc$V4)\ncor.test(sms2_test_acc$X1,sms2_test_acc$V4)\n# learning test is not diagnostic whatsoever \n\n#######################################################################\n# look at responses\ndsansnas$response.num = ifelse(dsansnas$response == \"yes\", 1,0)\ndsansnas.con1 = dsansnas %>% filter(con.num == 1)\ndsansnas.con2 = dsansnas %>% filter(con.num == 2)\ndsansnas.con3 = dsansnas %>% filter(con.num == 3)\n\nsum.response.stats1 = dsansnas.con1 %>% group_by(seq_num) %>% summarise(mean = mean(response.num), sd = sd(response.num))\nsum.response.stats2 = dsansnas.con2 %>% group_by(seq_num) %>% summarise(mean = mean(response.num),sd = sd(response.num))\nsum.response.stats3 = dsansnas.con3 %>% group_by(seq_num) %>% summarise(mean = mean(response.num),sd = sd(response.num))\n\nresponsedf = as.data.frame(cbind(sum.response.stats1$seq_num,sum.response.stats1$mean,sum.response.stats2$mean,sum.response.stats3$mean))\ncolnames(responsedf) =  c(\"seq_num\",\"intact\",\"scrambled\",\"scrambled-random\")\nresponsedf = responsedf %>% gather(\"con\",\"resp\", 2:4)\n\n# these didn't work. Not sure why.\n# rdf1 = aov_ez(\"seq_num\",\"resp\",responsedf, between = \"con\")\n# rdf1 = aov_car(resp ~ con + (seq_num/con),responsedf)\n\nrdf1 = aov(resp ~ con + (seq_num),responsedf)\nsummary(rdf1)\n# perfect. no difference in yes/nos between conditions\n\n###################################################\n# ID participants based on how frequently they give the same response \n# x = \nx= 0 \nfor (i in 2:dim(dsansnas)[1]){\n  if (dsansnas[i,1] == dsansnas[i-1,1]){\n    if (dsansnas[i,22] == dsansnas[i-1,22]){\n      dsansnas[i,23] = 1 + x; x = x+1\n    } else {\n      x = 0; dsansnas[i,23] = 0\n    }\n  } else {\n    x = 0; dsansnas[i,23] = 0\n  }\n}\n\n\n# here goes\nnonono = dsansnas %>% group_by(sub) %>% summarise(mean = mean(V23), sd = sd(V23))\nnonono = nonono %>% mutate(zmean = scale(mean))\n# just get rid of sub 10\n\n\n# look at subs who didn't have main effect\nmaineffect = d25 %>% filter(con.num != 3) %>% group_by(sub,con.num) %>% summarise(mean = mean(rt))\nmaineffect = maineffect %>% spread(con.num,mean)\ncolnames(maineffect) = c(\"sub\",\"intact\",\"scrambled\")\nmaineffect = maineffect %>% mutate(intact.minus.scrambled = intact - scrambled)\nsubs.no.main.effect = c(31, 10, 33, 28, 9, 25)\n\n\n########################################################################\n# mixed effect model? \n# ICC to see if seq accounts for large amount of variance \nd25$seq_num = as.factor(d25$seq_num)\nd25$item = as.factor(d25$item)\nd25$con.num = as.factor(d25$con.num)\nd25$repetition = as.factor(d25$repetition)\nd25$sub = as.factor(d25$sub)\n\n# mm2 = mixed(rt ~ con.num * rrb + ( 1 | sub) + (seq_num || item),d25, expand_re = TRUE, progress = TRUE)\n\nmm1 = lmer(rt ~ con.num * rrb + ( con.num * rrb || sub) + (1  | seq_num/item),d25)\n#failed to converge\nmm2 = lmer(rt ~ con.num * rrb + ( con.num + rrb || sub) + (1  | seq_num/item),d25)\n# failed to converge\nmm3 = lmer(rt ~ con.num * rrb + ( con.num * rrb || sub) + (1  | item),d25)\n#failed to converge\nmm4 = lmer(rt ~ con.num * rrb + ( con.num + rrb || sub) + (1  | item),d25)\n# model is nearly unidentifiable \n# mx4 = mm4 = mixed(rt ~ con.num * rrb + ( con.num + rrb || sub) + (1  | item),d25)\n# RAM'd out\n\nmm5 = lmer(rt ~ con.num * repetition * rrb + ( con.num + repetition + rrb || sub) + (1  | item),d25)\n# failed to converge\nmm6 = lmer(rt ~ con.num * repetition * rrb + ( con.num + repetition + rrb || sub)  ,d25)\n# failed to converge\nmm7 = lmer(rt ~ con.num * repetition * rrb + ( con.num + rrb || sub) + (1  | item),d25)\n# not helpful to include repetition\nmm8 = lmer(rt ~ con.num + ( con.num + rrb + repetition || sub) + (1  | item),d25)\n# ok \nmm9 = lmer(rt ~ con.num + ( con.num + rrb + repetition || sub) + (item || seq_num) ,d25)\n# failed\n\nmm10 = lmer(rt ~ 1 +  (item  || seq_num),d25)\n\n# hold that thought :  con.num + ( con.num + rrb || sub) +\n\n\n\n###############\n# misc for talk\nd.pos1 = dsansnas %>% filter(position == 1)\nlibrary(afex)\nd.pos1$con.num = as.factor(d.pos1$con.num)\nd.pos1$rrb = as.factor(d.pos1$rrb)\nd.pos1$repetition = as.factor(d.pos1$repetition)\n\napos1 = aov_ez(\"sub\", \"rt\", d.pos1, within = c(\"con.num\",\"repetition\", \"rrb\"))\napos1\nlsmeans(apos1,\"con.num\",contr = \"pairwise\", adjust = \"holm\")  \n",
    "created" : 1502223904620.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1364512278",
    "id" : "B4AFC93",
    "lastKnownWriteTime" : 1502228968,
    "last_content_update" : 1502228968695,
    "path" : "~/walter/fmri/sms_scan_analyses/behavior/rstudio_sms_scan/retrieval_sms_scan.R",
    "project_path" : "retrieval_sms_scan.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}